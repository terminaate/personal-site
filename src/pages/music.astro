---
import BaseLayout from '../layouts/base-layout.astro';
import { lastFmApi } from '../lastfm';
import type { Album, AlbumImage } from '../lastfm/types/album';
import type { RecentTrack } from '../lastfm/types/recent-track';

export const prerender = false;

const getAlbums = async () => {
  const data = await lastFmApi.request<{ topalbums: { album: Album[] } }>(
    'user.gettopalbums',
    {
      limit: 1000,
      period: 'overall',
    },
  );

  return data.topalbums.album;
};

const getNowPlaying = async () => {
  const data = await lastFmApi.request<{
    recenttracks: { track: RecentTrack[] };
  }>('user.getrecenttracks', {
    limit: 1000,
    period: 'overall',
  });

  const tracks = data.recenttracks.track;

  return tracks.find((o) => o['@attr']?.nowplaying);
};

const albums = await getAlbums();
const nowPlaying = await getNowPlaying();

const getImageSrc = (o: AlbumImage<string>[]) => {
  return o.find((o) => o.size === 'large')?.['#text'];
};
---

<BaseLayout title="Music">
  <div class="container">
    <span class="title">
      data provided by <a href="https://last.fm" target="_blank">last.fm</a>
    </span>
    <div class="albums">
      {
        nowPlaying && (
          <a href={nowPlaying.url} target="_blank" class="album">
            <div class="album-info">
              <span class="album-name">{nowPlaying.name}</span>
              {nowPlaying.name !== nowPlaying.artist['#text'] && (
                <span class="album-artist">{nowPlaying.artist['#text']}</span>
              )}
              <div class="playing-icon">
                <span />
                <span />
                <span />
              </div>
            </div>
            <img
              class="album-image"
              src={getImageSrc(nowPlaying.image)}
              onerror="this.onerror=null; this.src='/fallback.jpg';"
              alt=""
            />
          </a>
        )
      }
      {
        albums.map((album) => (
          <a href={album.url} target="_blank" class="album">
            <div class="album-info">
              <span class="album-name">{album.name}</span>
              {album.name !== album.artist.name && (
                <span class="album-artist">{album.artist.name}</span>
              )}
            </div>
            <img
              class="album-image"
              src={getImageSrc(album.image)}
              onerror="this.onerror=null; this.src='/fallback.jpg';"
              alt=""
            />
          </a>
        ))
      }
    </div>
  </div>
</BaseLayout>

<style>
  @keyframes bounce {
    10% {
      transform: scaleY(0.3); /* start by scaling to 30% */
    }

    30% {
      transform: scaleY(1); /* scale up to 100% */
    }

    60% {
      transform: scaleY(0.5); /* scale down to 50% */
    }

    80% {
      transform: scaleY(0.75); /* scale up to 75% */
    }

    100% {
      transform: scaleY(0.6); /* scale down to 60% */
    }
  }

  .container {
    display: flex;
    flex-direction: column;
    row-gap: 20px;

    .title {
      font-family: var(--font-secondary);
      color: var(--text-secondary);
      font-size: 14px;
      text-shadow: 0 0 10px #fff;
    }

    .albums {
      display: flex;
      align-items: center;
      gap: 20px;
      flex-wrap: wrap;
      justify-content: start;

      .album {
        width: 170px;
        height: 170px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        cursor: pointer;

        .album-image {
          position: absolute;
          width: 100%;
          height: 100%;
          z-index: -1;
        }

        .album-info {
          width: 100%;
          height: 100%;
          display: flex;
          flex-direction: column;
          row-gap: 10px;
          align-items: center;
          justify-content: center;
          transition: 0.3s opacity;
          text-align: center;
          background: rgba(0, 0, 0, 0.5);
          opacity: 0;
          position: relative;

          .album-name {
            font-family: var(--font-primary);
            font-weight: 500;
            font-size: 14px;
          }

          .album-artist {
            font-family: var(--font-secondary);
            color: var(--text-secondary);
          }

          &:hover {
            opacity: 1;
          }

          .playing-icon {
            position: absolute;
            bottom: 15px;
            right: 15px;
            display: flex;
            justify-content: space-between;
            width: 13px;
            height: 18px;

            span {
              width: 3px;
              height: 100%;
              background-color: white;
              /* border-radius: 3px; */
              transform-origin: bottom;
              animation: bounce 2.2s ease infinite alternate;
              content: '';
            }

            span {
              &:nth-of-type(2) {
                animation-delay: -2.2s; /* Start at the end of animation */
              }

              &:nth-of-type(3) {
                animation-delay: -3.7s; /* Start mid-way of return of animation */
              }
            }
          }
        }
      }
    }
  }
</style>
